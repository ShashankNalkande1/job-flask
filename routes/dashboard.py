from flask import Blueprint, render_template, redirect, url_for
from flask_login import login_required, current_user
from models.user import User
from models.business import BusinessInfo
from models.preferences import Preferences
from models.dashboard import DashboardSummary

dashboard_bp = Blueprint('dashboard', __name__)

@dashboard_bp.route('/')
@login_required
def index():
    # Check if user has completed onboarding
    if not current_user.onboarding_completed:
        return redirect(url_for('onboarding.start'))
    
    # Get user's business info and preferences
    business_info = BusinessInfo.query.filter_by(user_id=current_user.id).first()
    preferences = Preferences.query.filter_by(user_id=current_user.id).first()
    
    # Get dashboard summary data
    dashboard_data = DashboardSummary.query.first()
    if not dashboard_data:
        dashboard_data = DashboardSummary(team_count=0, active_projects=0, notifications=0)
    
    return render_template('dashboard/index.html', 
                         user=current_user,
                         business_info=business_info,
                         preferences=preferences,
                         dashboard_data=dashboard_data)

@dashboard_bp.route('/profile')
@login_required
def profile():
    business_info = BusinessInfo.query.filter_by(user_id=current_user.id).first()
    preferences = Preferences.query.filter_by(user_id=current_user.id).first()
    
    return render_template('dashboard/profile.html',
                         user=current_user,
                         business_info=business_info,
                         preferences=preferences)

@dashboard_bp.route('/api/projects', methods=['POST'])
@login_required
def create_project():
    """API endpoint to create a new project"""
    from flask import request, jsonify
    
    try:
        data = request.get_json()
        
        # Validate required fields
        if not data.get('name'):
            return jsonify({'error': 'Project name is required'}), 400
        
        # Here you would typically save to database
        # For now, we'll simulate successful creation
        project_data = {
            'id': 1,  # Would be generated by database
            'name': data['name'],
            'description': data.get('description', ''),
            'priority': data.get('priority', 'medium'),
            'start_date': data.get('startDate'),
            'due_date': data.get('dueDate'),
            'category': data.get('category'),
            'created_by': current_user.id,
            'status': 'active'
        }
        
        return jsonify({
            'success': True,
            'message': f'Project "{data["name"]}" created successfully!',
            'project': project_data
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@dashboard_bp.route('/api/team-members', methods=['POST'])
@login_required
def add_team_member():
    """API endpoint to add a new team member"""
    from flask import request, jsonify
    
    try:
        data = request.get_json()
        
        # Validate required fields
        if not data.get('name'):
            return jsonify({'error': 'Name is required'}), 400
        
        if not data.get('email'):
            return jsonify({'error': 'Email is required'}), 400
        
        # Validate email format
        import re
        email_pattern = r'^[^\s@]+@[^\s@]+\.[^\s@]+$'
        if not re.match(email_pattern, data['email']):
            return jsonify({'error': 'Invalid email format'}), 400
        
        # Here you would typically save to database and send invitation email
        # For now, we'll simulate successful addition
        member_data = {
            'id': 1,  # Would be generated by database
            'name': data['name'],
            'email': data['email'],
            'role': data.get('role', 'member'),
            'department': data.get('department', ''),
            'invitation_sent': data.get('sendInvitation', True),
            'added_by': current_user.id,
            'status': 'pending'
        }
        
        return jsonify({
            'success': True,
            'message': f'Team member "{data["name"]}" added successfully!',
            'member': member_data
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500